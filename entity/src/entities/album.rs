//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0-rc.5

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "album")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub release_date: Date,
    pub created_at: DateTime,
    pub updated_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::album_artist::Entity")]
    AlbumArtist,
    #[sea_orm(has_many = "super::album_track::Entity")]
    AlbumTrack,
}

impl Related<super::album_artist::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlbumArtist.def()
    }
}

impl Related<super::album_track::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::AlbumTrack.def()
    }
}

impl Related<super::artist::Entity> for Entity {
    fn to() -> RelationDef {
        super::album_artist::Relation::Artist.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::album_artist::Relation::Album.def().rev())
    }
}

impl Related<super::track::Entity> for Entity {
    fn to() -> RelationDef {
        super::album_track::Relation::Track.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::album_track::Relation::Album.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
